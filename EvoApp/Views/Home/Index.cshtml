@using EvoApp.Models
@using EvoApp.Services
@inject LandMap landMap
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
	ViewBag.Title = "Index";
}
<div id="land-field">
	@foreach (var landTile in landMap.LandTiles)
	{
		<div data-land-x="@landTile.Coordinates.landX" data-land-y="@landTile.Coordinates.landY" class="land-tile @landTile.LandType">
			@for (int y = 0; y < landTile.TileGrid.GetLength(0); y++)
			{
				@for (int x = 0; x < landTile.TileGrid.GetLength(1); x++)
				{
					<div data-tile-x="@x" data-tile-y="@y" class="grid-tile">
						@if (landTile.TileGrid[y, x] is not null)
						{
							<div>
								<div class="item-name">@landTile.TileGrid[y, x]!.FullName</div>
								<div class="item-age">@landTile.TileGrid[y, x]!.LiveState.Age</div>
								<button class="b-collect">Collect</button>
							</div>
						}
					</div>
				}
			}
		</div>
	}
</div>

@section lib {
	<script src="lib/microsoft/signalr/dist/browser/signalr.min.js" asp-append-version="true"></script>
	<script src="scripts/home/index.js" asp-append-version="true"></script>
}
@section style {
	<link href="~/styles/home/index.css" rel="stylesheet" asp-append-version="true" />
}

@section script {
	<script asp-append-version="true">
		const hubConnection = new signalR.HubConnectionBuilder().withUrl("/land").build();

		[...document.getElementsByClassName("grid-tile")]	
			.forEach(land => land.addEventListener("click", (ev) => {
				// TODO - parentNode depends on element clicked, if text clicked -> error
				console.log(ev.target);
				if (ev.target.classList.contains("grid-tile")) {

					const { landX, landY } = ev.target.parentNode.dataset;
					const { tileX, tileY } = ev.target.dataset;
					const subtype = document.querySelector("input[name='subtype']:checked");

					if (!subtype) return;

					const tier = subtype.parentNode.dataset.tier;
					hubConnection.invoke("PlacePlant",
						parseInt(tier), parseInt(subtype.value),
						parseInt(landX, 10), parseInt(landY, 10),
						parseInt(tileX, 10), parseInt(tileY, 10));

				}
			}));

		[...document.getElementsByClassName("b-collect")]
			.forEach(collect => collect.addEventListener("click", (ev) => {
				// TODO - parentNode depends on element clicked, if text clicked -> error

				const { landX, landY } = ev.target.parentNode.parentNode.parentNode.dataset;
				const { tileX, tileY } = ev.target.parentNode.parentNode.dataset;

				hubConnection.invoke("GatherPlant",
					parseInt(landX, 10), parseInt(landY, 10),
					parseInt(tileX, 10), parseInt(tileY, 10));
			}))

		hubConnection.on("PlacedItem", item => createPlacedItemHTML(item));
		hubConnection.on("GatheredItem", gathered => console.log(gathered));

		hubConnection.on("Grow", item => {
			const tile = selectTileByCoordinates(item.coordinates);

			tile.querySelector(".item-age")
				.textContent = item.state.age;
		})

		hubConnection.on("Evolve", item => {
			// TODO - seprate update for evolve, live, etc
			const tile = selectTileByCoordinates(item.coordinates);

			tile.querySelector(".item-age")
				.textContent = item.updateData.age;

			if (item.updateData.evolveResult) {
				tile.querySelector(".item-name")
					.textContent = item.updateData.evolveResult.fullName;
			}
		})

		hubConnection.start().then(() => { console.log("Socket connected!") })

	</script>
}