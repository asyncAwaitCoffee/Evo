@using EvoApp.Models
@using EvoApp.Services
@inject LandMap landMap

@{
	ViewBag.Title = "Index";
}
<div id="land-field">
	@foreach (var landTile in landMap.LandTiles)
	{
		<div data-land-x="@landTile.Coordinates.landX" data-land-y="@landTile.Coordinates.landY" class="land-tile @landTile.LandType">
			@for (int y = 0; y < landTile.TileGrid.GetLength(0); y++)
			{
				@for (int x = 0; x < landTile.TileGrid.GetLength(1); x++)
				{
					<div data-tile-x="@x" data-tile-y="@y">
						<div class="item-name">@landTile.TileGrid[y, x]?.FullName</div>
						<div class="item-age"></div>						
					</div>
				}
			}
		</div>
	}
</div>

@section lib {
	<script src="lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
}
@section style {
	<link href="~/styles/home/index.css" rel="stylesheet" />
}

@section script {
	<script>
		const hubConnection = new signalR.HubConnectionBuilder().withUrl("/land").build();

		[...document.getElementsByClassName("land-tile")]
			.forEach(land => land.addEventListener("click", (ev) => {
				const { landX, landY } = ev.target.parentNode.dataset;
				const { tileX, tileY } = ev.target.dataset;
				const subtype = document.querySelector("input[name='subtype']:checked");
				if (!subtype) return;
				const tier = subtype.parentNode.dataset.tier;
				hubConnection.invoke("PlacePlant",
					parseInt(tier), parseInt(subtype.value), parseInt(landX, 10), parseInt(landY), parseInt(tileX, 10), parseInt(tileY, 10));
			}))

		hubConnection.on("PlacedItem", item => {
			// TODO - display recieved info: name, image...
			
			document
				.querySelector(`[data-land-x="${item.landX}"][data-land-y="${item.landY}"]`)
				.querySelector(`[data-tile-x="${item.tileX}"][data-tile-y="${item.tileY}"]`)
				.querySelector(".item-name")
				.textContent = item.name;
			
		
		});

		hubConnection.on("Grow", item => {
			console.log(item);
			document
				.querySelector(`[data-land-x="${item.coordinates.landX}"][data-land-y="${item.coordinates.landY}"]`)
				.querySelector(`[data-tile-x="${item.coordinates.tileX}"][data-tile-y="${item.coordinates.tileY}"]`)
				.querySelector(".item-age")
				.textContent = item.state.age;
		})

		hubConnection.on("Evolve", item => {
			console.log(item);
			console.log(item.updateData.age);

			document
				.querySelector(`[data-land-x="${item.coordinates.landX}"][data-land-y="${item.coordinates.landY}"]`)
				.querySelector(`[data-tile-x="${item.coordinates.tileX}"][data-tile-y="${item.coordinates.tileY}"]`)
				.querySelector(".item-age")
				.textContent = item.updateData.age;

			if (item.updateData.evolveResult) {
				document
					.querySelector(`[data-land-x="${item.coordinates.landX}"][data-land-y="${item.coordinates.landY}"]`)
					.querySelector(`[data-tile-x="${item.coordinates.tileX}"][data-tile-y="${item.coordinates.tileY}"]`)
					.querySelector(".item-name")
					.textContent = item.updateData.evolveResult.fullName;
			}
		})

		hubConnection.start().then(() => { console.log("Socket connected!") });

	</script>
}